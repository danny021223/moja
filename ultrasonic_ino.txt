#include <Wire.h>
#include <MPU9250.h>
#include <Servo.h>

MPU9250 mpu;

// 칼만 필터 클래스 정의
class KalmanFilter 
{
  public:
    KalmanFilter(float process_noise, float sensor_noise, float estimation_error, float initial_value) 
    {
      q = process_noise;
      r = sensor_noise;
      p = estimation_error;
      x = initial_value;
    }

    float update(float measurement) 
    {
      // Prediction update
      p = p + q;

      // Measurement update
      k = p / (p + r);
      x = x + k * (measurement - x);
      p = (1 - k) * p;

      return x;
    }

  private:
    float q; // Process noise
    float r; // Sensor noise
    float p; // Estimation error
    float k; // Kalman gain
    float x; // Estimated value
};

// 칼만 필터 초기화 (X, Y, Z 축 각각에 대해)
// 가속도
KalmanFilter kalmanAccX(0.1, 0.1, 0.1, 0);
KalmanFilter kalmanAccY(0.1, 0.1, 0.1, 0);
KalmanFilter kalmanAccZ(0.1, 0.1, 0.1, 0);
// 자이로
KalmanFilter kalmanGyroX(0.1, 0.1, 0.1, 0);
KalmanFilter kalmanGyroY(0.1, 0.1, 0.1, 0);
KalmanFilter kalmanGyroZ(0.1, 0.1, 0.1, 0);
// 지자기
KalmanFilter kalmanMagX(0.1, 0.1, 0.1, 0);
KalmanFilter kalmanMagY(0.1, 0.1, 0.1, 0);
KalmanFilter kalmanMagZ(0.1, 0.1, 0.1, 0);

// 가속도, 자이로, 지자기 필터링된 값
float accX_filtered, accY_filtered, accZ_filtered;
float gyroX_filtered, gyroY_filtered, gyroZ_filtered;
float magX_filtered, magY_filtered, magZ_filtered;

// 속도 및 위치 변수
float velocityX = 0, velocityY = 0, velocityZ = 0;
float positionX = 0, positionY = 0, positionZ = 0;

// 보정된 각도 (자이로 + 지자기 데이터를 기반으로)
float angleX = 0, angleY = 0, angleZ = 0;

Servo servoXY1;  // XY 평면의 각도를 조절하는 서보 모터 (360서보 사용)
Servo servoXY2;
Servo servoXY3;
Servo servoZ1;   // Z축 위치를 조절하는 서보 모터 (360서보 사용)
Servo servoZ2;
Servo servoZ3;
Servo esc1; // BLDC모터
Servo esc2;
Servo esc3;
Servo esc4;
Servo esc5;

float radius = 0; // 나선형
float angle = 0; // 나선형

const float angularVelocity = 0.01; // 나선형 각속도 증가
const float radiusIncreaseRate = 0.5; // 나선형 반지름 증가

float targetX, targetY, targetZ; // 나선형 좌표
float currentX = 0, currentY = 0, currentZ = 0; // 현재 좌표

// 물체 좌표
float objectX = 0, objectY = 0;

unsigned long lastTime = 0;
float deltaTime;
unsigned long currentTime;

const float kp = 0.5;

// 초음파 센서 핀 설정
const int trigPin = 2;
const int echoPin = 3;

// 초음파 관련 변수
float distances[3]; // 3번의 측정된 거리
float sensorPositions[3][2]; // 3번 측정 시 센서의 좌표 (x, y)
int measurementCount = 0;
bool objectDetected = false; // 물체가 감지되었는지 여부

//전자석
int electromagnetPin1 = 15;
int electromagnetPin2 = 16;
int conditionSatisfiedCount = 0;

void setup() 
{
  Serial.begin(9600); // 시리얼 모니터 시작
  Wire.begin(); // I2C 통신 시작
  
  if (!mpu.setup(0x68)) 
  { // MPU9250의 I2C 주소는 0x68
    Serial.println("MPU9250 연결 실패!");
    while (1); // 연결 실패 시 무한 루프
  }
  // 지자기 센서
  mpu.calibrateMag(); 

  Serial.println("지자기 센서 캘리브레이션 완료!");

  servoXY1.attach(4);  // XY 평면 기울기 제어 서보 모터 연결
  servoXY2.attach(5);
  servoXY3.attach(6);
  servoZ1.attach(7);    // Z축 제어 서보 모터 연결
  servoZ2.attach(8);
  servoZ3.attach(9);

  esc1.attach(10);
  esc2.attach(11);
  esc3.attach(12);
  esc4.attach(13);
  esc5.attach(14);

  servoXY1.write(90);  // 초기 위치 (180도)
  servoXY2.write(90);
  servoXY3.write(90);
  servoZ1.write(90);   // 초기 위치 (180도)
  servoZ2.write(90);
  servoZ3.write(90);
  
  // BLDC 모터 초기화
  esc1.writeMicroseconds(1000);
  esc2.writeMicroseconds(1000);
  esc3.writeMicroseconds(1000);
  esc4.writeMicroseconds(1000);
  esc5.writeMicroseconds(1000);

  pinMode(electromagnetPin1, OUTPUT); // 전자석 초기조건
  pinMode(electromagnetPin2, OUTPUT);
  digitalWrite(electromagnetPin1, HIGH);
  digitalWrite(electromagnetPin2, HIGH);
}

void loop()
{
  if (mpu.update()) 
  {
    unsigned long currentTime = millis();
    float deltaTime = (currentTime - lastTime) / 1000.0; // 초 단위로 변환

    // 가속도 데이터 필터링
    accX_filtered = kalmanAccX.update(mpu.getAccX());
    accY_filtered = kalmanAccY.update(mpu.getAccY());
    accZ_filtered = kalmanAccZ.update(mpu.getAccZ());

    // 자이로 데이터 필터링
    gyroX_filtered = kalmanGyroX.update(mpu.getGyroX());
    gyroY_filtered = kalmanGyroY.update(mpu.getGyroY());
    gyroZ_filtered = kalmanGyroZ.update(mpu.getGyroZ());

    // 지자기 데이터 필터링 (칼만 필터를 따로 사용)
    magX_filtered = kalmanMagX.update(mpu.getMagX());
    magY_filtered = kalmanMagY.update(mpu.getMagY());
    magZ_filtered = kalmanMagZ.update(mpu.getMagZ());

    // 자이로 데이터를 사용하여 회전 각도를 보정 (단순 적분)
    angleX += gyroX_filtered * deltaTime;
    angleY += gyroY_filtered * deltaTime;
    angleZ += gyroZ_filtered * deltaTime;

    // 지자기 센서로부터 절대적인 heading 계산
    float heading = atan2(magY_filtered, magX_filtered) * (180.0 / PI);

    // 자이로 데이터의 드리프트를 지자기 센서의 방향으로 보정
    angleZ = 0.98 * angleZ + 0.02 * heading; // 98% 자이로, 2% 지자기 사용하여 보정

    // 가속도 데이터를 자이로 데이터를 사용해 보정
    float accX_corrected = accX_filtered * cos(angleY) * cos(angleZ);
    float accY_corrected = accY_filtered * cos(angleX) * cos(angleZ);
    float accZ_corrected = accZ_filtered - 9.81; // 중력 보정

    // 속도 계산 (가속도의 적분)
    velocityX += accX_corrected * deltaTime;
    velocityY += accY_corrected * deltaTime;
    velocityZ += accZ_corrected * deltaTime;

    // 위치 계산 (속도의 적분)
    positionX += velocityX * deltaTime;
    positionY += velocityY * deltaTime;
    positionZ += velocityZ * deltaTime;

    currentX = positionX;
    currentY = positionY;
    currentZ = positionZ;


    // 물체 감지 여부 확인
    float distance = measureDistance();
    
    if (distance > 0 && distance < 400) // 4m 이내 물체 감지 시
    {  
      objectDetected = true; // 물체가 감지된 경우 3번 측정 시작
      for (int i = 0; i < 3; i++) 
      {
        distances[i] = distance;  // 현재 위치에서 거리 측정
        sensorPositions[i][0] = positionX;
        sensorPositions[i][1] = positionY;

        // 측정 중에 물체가 사라지면 측정 멈추고 빠져나오기
        distance = measureDistance();
        if (distance >= 400) 
        {
          Serial.println("물체가 사라졌습니다. 측정 중단.");
          objectDetected = false;
          break;  // 측정을 중단하고 루프 빠져나오기
        }
        
        delay(100);  // 측정 간 약간의 지연을 둠
      }

      // 물체가 3번의 거리 측정을 완료한 경우
      if (objectDetected) 
      {
        calculateObjectPosition();  // 삼변측량을 통해 물체 좌표 계산

        // 물체와의 거리가 30 이상일 때
        while (measureDistance() > 30) 
        {
          Serial.println("Approaching object...");

          float errorX = objectX - currentX;
          float errorY = objectY - currentY;
          float angleToObject = atan2(errorY, errorX) * (180.0 / PI);

          int servoAngleXY = constrain(90 + angleToObject/2, 0, 180);
          servoXY1.write(servoAngleXY/3);
          servoXY2.write(servoAngleXY/3);
          servoXY3.write(servoAngleXY/3);

          // 물체로 다가가기
          esc1.writeMicroseconds(1600);  
          esc2.writeMicroseconds(1600);
          esc3.writeMicroseconds(1600);
          esc4.writeMicroseconds(1600);
          esc5.writeMicroseconds(1600);


          delay(100);
        }

        if (measureDistance() <= 30)
        {
          unsigned long startTime = millis();
          while(millis() - startTime <= 10000) // 10초 동안
          {
            if(Serial.available()) // 마스터로부터 데이터 수신
            {
              String receivedData = Serial.readStringUntil('\n');
              Serial.println(receivedData);
              if (receivedData == "true") // 카메라가 사람을 인식하면
              {
                conditionSatisfiedCount++; // 조건을 만족할 때마다 카운트 증가
                
                if (conditionSatisfiedCount == 1) // 첫 번째로 조건을 만족했을 때 첫 번째 전자석 끄기
                {
                  Serial.println("첫 번째 전자석 꺼짐");
                  digitalWrite(electromagnetPin1, LOW);
                }
                else if (conditionSatisfiedCount == 2) 
                {
                  Serial.println("마지막 전자석 꺼짐");
                  digitalWrite(electromagnetPin2, LOW);
                }
                else if (conditionSatisfiedCount >= 3) 
                {
                  Serial.println("더이상 구조용품이 없음");
                }
              }
            }
          }
          delay(100);

          // 저장된 currentX, currentY 좌표로 돌아가기
          Serial.println("Returning to original spiral position...");
          while (sqrt(pow(currentX - objectX, 2) + pow(currentY - objectY, 2)) > 1)  // 1 이상의 오차가 있을 때까지 이동
          {
            float returnAngle = atan2(currentY - objectY, currentX - objectX) * (180.0 / PI);
            int returnServoAngleXY = constrain(90 + returnAngle/2, 0, 180);
            servoXY1.write(returnServoAngleXY/3);
            servoXY2.write(returnServoAngleXY/3);
            servoXY3.write(returnServoAngleXY/3);

            esc1.writeMicroseconds(1600);
            esc2.writeMicroseconds(1600);
            esc3.writeMicroseconds(1600);
            esc4.writeMicroseconds(1600);
            esc5.writeMicroseconds(1600);


            delay(10);
          }
          // 나선형 경로 계산
          angle += angularVelocity * deltaTime;
          radius += radiusIncreaseRate * deltaTime;

          targetX = radius * cos(angle);
          targetY = radius * sin(angle);
          targetZ = -50; // Z축 고정

          float errorX = targetX - currentX;
          float errorY = targetY - currentY;
          float angleXY = atan2(errorY, errorX) * (180.0 / PI);

          int servoAngleXY = constrain(90 + angleXY/2, 0, 180);
          servoXY1.write(servoAngleXY/3);
          servoXY2.write(servoAngleXY/3);
          servoXY3.write(servoAngleXY/3);

          esc1.writeMicroseconds(1500 + angleXY/2);
          esc2.writeMicroseconds(1500 + angleXY/2);
          esc3.writeMicroseconds(1500 - angleXY/2);
          esc4.writeMicroseconds(1500 - angleXY/2);
          esc5.writeMicroseconds(2000);
        }
      }
    }
    else 
    {
      // 물체가 감지되지 않았을 때 계속해서 나선형 경로로 이동
      Serial.println("물체가 감지되지 않음. Continuing spiral path...");

      // 나선형 경로 계산 및 이동
      angle += angularVelocity * deltaTime;
      radius += radiusIncreaseRate * deltaTime;

      targetX = radius * cos(angle);
      targetY = radius * sin(angle);
      targetZ = -50; // Z축 고정

      float errorX = targetX - currentX;
      float errorY = targetY - currentY;
      float angleXY = atan2(errorY, errorX) * (180.0 / PI);

      int servoAngleXY = constrain(90 + angleXY/2, 0, 180);
      servoXY1.write(servoAngleXY/3);
      servoXY2.write(servoAngleXY/3);
      servoXY3.write(servoAngleXY/3);

      esc1.writeMicroseconds(1500 + angleXY/2);
      esc2.writeMicroseconds(1500 + angleXY/2);
      esc3.writeMicroseconds(1500 - angleXY/2);
      esc4.writeMicroseconds(1500 - angleXY/2);
      esc5.writeMicroseconds(2000);
    }

    lastTime = currentTime; // 시간 업데이트
  }

  delay(10);
}


// 거리 측정 함수
float measureDistance() 
{
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  long duration = pulseIn(echoPin, HIGH);
  float distance = duration * 0.148 / 2;

  return distance;
}

// 삼변측량을 통한 물체 좌표 계산 함수
void calculateObjectPosition() 
{
  float x1 = sensorPositions[0][0];
  float y1 = sensorPositions[0][1];
  float x2 = sensorPositions[1][0];
  float y2 = sensorPositions[1][1];
  float x3 = sensorPositions[2][0];
  float y3 = sensorPositions[2][1];

  float d1 = distances[0];
  float d2 = distances[1];
  float d3 = distances[2];

  // 삼변측량 알고리즘 적용
  float A = 2 * (x2 - x1);
  float B = 2 * (y2 - y1);
  float C = d1 * d1 - d2 * d2 - x1 * x1 + x2 * x2 - y1 * y1 + y2 * y2;
  float D = 2 * (x3 - x2);
  float E = 2 * (y3 - y2);
  float F = d2 * d2 - d3 * d3 - x2 * x2 + x3 * x3 - y2 * y2 + y3 * y3;

  objectX = (C * E - F * B) / (E * A - B * D);
  objectY = (C * D - A * F) / (B * D - A * E);

  Serial.print("Object X: ");
  Serial.print(objectX);
  Serial.print(", Object Y: ");
  Serial.println(objectY);
}